import { 
  Controller, 
  Get, 
  Post, 
  Patch, 
  Param, 
  Query, 
  Body,
  UseGuards,
  ParseIntPipe,
  DefaultValuePipe
} from '@nestjs/common';
import { 
  ApiTags, 
  ApiBearerAuth, 
  ApiOperation, 
  ApiResponse,
  ApiQuery,
  ApiParam
} from '@nestjs/swagger';
import { AdminGuard } from '../auth/admin.guard';
import { AdminService } from './admin.service';
import { 
  AdminStatsOverviewDto, 
  AdminUserListDto, 
  AdminUserDto,
  AdminActionResponseDto,
  AdminUserUpdateDto,
  AdminBulkActionDto,
  AdminUserExportDto 
} from './dto/admin-response.dto';

@ApiTags('Admin')
@ApiBearerAuth()
@UseGuards(AdminGuard)
@Controller('admin')
export class AdminController {
  constructor(private readonly adminService: AdminService) {}

  @Get('overview')
  @ApiOperation({
    summary: 'System overview dashboard',
    description: `
**üëë Admin Dashboard Overview**

Comprehensive system statistics and metrics for administrators.
Provides real-time insights into user activity, system health, and security status.

**‚ú® Includes:**
‚Ä¢ Total user count & growth metrics
‚Ä¢ Active user sessions
‚Ä¢ Security alerts & failed logins
‚Ä¢ System health status
‚Ä¢ API usage statistics
‚Ä¢ Performance metrics

**üîí Admin Only:** Requires admin authentication
    `
  })
  @ApiResponse({
    status: 200,
    description: 'üìä System overview statistics',
    type: AdminStatsOverviewDto,
    examples: {
      overview: {
        summary: 'Admin Dashboard Data',
        value: {
          totalUsers: 1247,
          newUsersToday: 23,
          activeSessions: 89,
          systemHealth: 'UP',
          apiCallsToday: 156789,
          failedLoginsLastHour: 3,
          lockedAccounts: 1,
          uptimePercentage: 99.8
        }
      }
    }
  })
  @ApiResponse({
    status: 403,
    description: 'üö´ Admin access required',
    schema: {
      example: {
        statusCode: 403,
        message: 'Admin access required',
        error: 'Forbidden'
      }
    }
  })
  async getSystemOverview(): Promise<AdminStatsOverviewDto> {
    return this.adminService.getSystemOverview();
  }

  @Get('users')
  @ApiOperation({
    summary: 'List all users with pagination',
    description: `
**üë• User Management Dashboard**

Paginated list of all registered users with detailed information for administration.
Includes user status, last login, security details, and account management data.

**‚ú® Features:**
‚Ä¢ Paginated user listing
‚Ä¢ User status indicators
‚Ä¢ Last login tracking
‚Ä¢ Security information
‚Ä¢ Account management details
‚Ä¢ Admin privilege indicators

**üîç Perfect for:**
‚Ä¢ User account management
‚Ä¢ Security monitoring
‚Ä¢ User activity analysis
‚Ä¢ Account status tracking
    `
  })
  @ApiQuery({ 
    name: 'page', 
    required: false, 
    type: Number, 
    description: 'Page number (default: 1)',
    example: 1
  })
  @ApiQuery({ 
    name: 'limit', 
    required: false, 
    type: Number, 
    description: 'Users per page (default: 20, max: 100)',
    example: 20
  })
  @ApiResponse({
    status: 200,
    description: 'üë• Paginated user list',
    type: AdminUserListDto,
    examples: {
      userList: {
        summary: 'User Management Data',
        value: {
          users: [
            {
              id: 'clp1234567890',
              email: 'john.doe@example.com',
              username: 'johndoe123',
              isAdmin: false,
              failedLoginAttempts: 0,
              lockedUntil: null,
              createdAt: '2024-01-15T10:30:00.000Z',
              updatedAt: '2024-01-15T14:30:00.000Z',
              lastLogin: '2024-01-15T09:45:00.000Z',
              status: 'active'
            }
          ],
          total: 1247,
          page: 1,
          limit: 20,
          totalPages: 63
        }
      }
    }
  })
  async getAllUsers(
    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,
    @Query('limit', new DefaultValuePipe(20), ParseIntPipe) limit: number,
  ): Promise<AdminUserListDto> {
    // Ensure reasonable limits
    const safeLimit = Math.min(limit, 100);
    return this.adminService.getAllUsers(page, safeLimit);
  }

  @Get('users/:id')
  @ApiOperation({
    summary: 'Get detailed user information',
    description: `
**üîç User Detail View**

Comprehensive user account information for administrative purposes.
Includes security details, account status, and management options.

**‚ú® Information Includes:**
‚Ä¢ Complete user profile
‚Ä¢ Security status & failed attempts
‚Ä¢ Account creation & update history
‚Ä¢ Last login tracking
‚Ä¢ Admin privilege status
‚Ä¢ Account lock status
    `
  })
  @ApiParam({ 
    name: 'id', 
    description: 'User ID to retrieve',
    example: 'clp1234567890'
  })
  @ApiResponse({
    status: 200,
    description: 'üë§ User details retrieved',
    type: AdminUserDto
  })
  @ApiResponse({
    status: 404,
    description: '‚ùå User not found',
    schema: {
      example: {
        statusCode: 404,
        message: 'User with ID clp1234567890 not found',
        error: 'Not Found'
      }
    }
  })
  async getUserById(@Param('id') userId: string): Promise<AdminUserDto> {
    return this.adminService.getUserById(userId);
  }

  @Post('users/:id/unlock')
  @ApiOperation({
    summary: 'Unlock locked user account',
    description: `
**üîì Account Unlock Management**

Unlock a user account that has been locked due to security policies.
Resets failed login attempts and removes account lock restrictions.

**‚ú® Actions Performed:**
‚Ä¢ Remove account lock timestamp
‚Ä¢ Reset failed login attempts to 0
‚Ä¢ Log admin action for audit trail
‚Ä¢ Enable immediate user access

**üõ°Ô∏è Security Note:** This action is logged for audit purposes
    `
  })
  @ApiParam({ 
    name: 'id', 
    description: 'User ID to unlock',
    example: 'clp1234567890'
  })
  @ApiResponse({
    status: 200,
    description: 'üîì User account unlocked successfully',
    type: AdminActionResponseDto,
    examples: {
      unlocked: {
        summary: 'Account Unlocked',
        value: {
          success: true,
          message: 'User account unlocked successfully',
          timestamp: '2024-01-15T14:30:00.000Z',
          userId: 'clp1234567890'
        }
      }
    }
  })
  async unlockUser(@Param('id') userId: string): Promise<AdminActionResponseDto> {
    return this.adminService.unlockUser(userId);
  }

  @Patch('users/:id/admin')
  @ApiOperation({
    summary: 'Toggle user admin privileges',
    description: `
**üëë Admin Privilege Management**

Grant or revoke administrative privileges for a user account.
This action changes the user's ability to access admin-only endpoints.

**‚ú® Features:**
‚Ä¢ Toggle admin status (grant/revoke)
‚Ä¢ Immediate privilege application
‚Ä¢ Audit logging for security
‚Ä¢ Role-based access control

**‚ö†Ô∏è Important:** Use with caution - admin privileges grant full system access
    `
  })
  @ApiParam({ 
    name: 'id', 
    description: 'User ID to modify admin status',
    example: 'clp1234567890'
  })
  @ApiResponse({
    status: 200,
    description: 'üëë Admin privileges updated',
    type: AdminActionResponseDto,
    examples: {
      granted: {
        summary: 'Admin Privileges Granted',
        value: {
          success: true,
          message: 'Admin privileges granted successfully',
          timestamp: '2024-01-15T14:30:00.000Z',
          userId: 'clp1234567890'
        }
      },
      revoked: {
        summary: 'Admin Privileges Revoked',
        value: {
          success: true,
          message: 'Admin privileges revoked successfully',
          timestamp: '2024-01-15T14:30:00.000Z',
          userId: 'clp1234567890'
        }
      }
    }
  })
  async toggleAdminStatus(@Param('id') userId: string): Promise<AdminActionResponseDto> {
    return this.adminService.toggleAdminStatus(userId);
  }

  @Get('security/alerts')
  @ApiOperation({
    summary: 'Get security alerts and suspicious activity',
    description: `
**üõ°Ô∏è Security Monitoring Center**

Monitor security-related activities and potential threats.
Provides overview of locked accounts, suspicious login attempts, and security incidents.

**‚ú® Monitoring Includes:**
‚Ä¢ Locked user accounts
‚Ä¢ High failed login attempts
‚Ä¢ Suspicious activity patterns
‚Ä¢ Security incident count
‚Ä¢ Account status overview

**üö® Use for:**
‚Ä¢ Security incident response
‚Ä¢ Proactive threat monitoring
‚Ä¢ Account security management
‚Ä¢ Suspicious activity investigation
    `
  })
  @ApiResponse({
    status: 200,
    description: 'üö® Security alerts and monitoring data',
    schema: {
      examples: {
        securityAlerts: {
          summary: 'Security Monitoring Data',
          value: {
            lockedAccounts: [
              {
                id: 'clp1234567890',
                email: 'suspicious@example.com',
                username: 'suspicious_user',
                lockedUntil: '2024-01-15T15:30:00.000Z',
                failedLoginAttempts: 5
              }
            ],
            suspiciousActivity: [
              {
                id: 'clp0987654321',
                email: 'risky@example.com',
                username: 'risky_user',
                failedLoginAttempts: 4
              }
            ],
            totalSecurityIssues: 2
          }
        }
      }
    }
  })
  async getSecurityAlerts() {
    return this.adminService.getSecurityAlerts();
  }

  // Enhanced User Management Endpoints for NextJS Frontend

  @Get('users-advanced')
  @ApiOperation({
    summary: 'Advanced user listing with filtering and sorting',
    description: `
**üîç Enhanced User Management**

Advanced user listing with comprehensive filtering, sorting, and search capabilities.
Perfect for NextJS frontend integration with real-time updates.

**‚ú® Features:**
‚Ä¢ Text search (username/email)
‚Ä¢ Status filtering (active/locked/admin)
‚Ä¢ Column sorting (any field)
‚Ä¢ Pagination with metadata
‚Ä¢ Frontend-friendly response format

**üéØ NextJS Integration Ready:**
‚Ä¢ Optimized response structure
‚Ä¢ Search debouncing support
‚Ä¢ Sort state management
‚Ä¢ Filter persistence
    `
  })
  @ApiQuery({ name: 'page', required: false, type: Number, example: 1 })
  @ApiQuery({ name: 'limit', required: false, type: Number, example: 20 })
  @ApiQuery({ name: 'search', required: false, type: String, example: 'john' })
  @ApiQuery({ name: 'status', required: false, type: String, example: 'active' })
  @ApiQuery({ name: 'sortBy', required: false, type: String, example: 'createdAt' })
  @ApiQuery({ name: 'sortOrder', required: false, enum: ['asc', 'desc'], example: 'desc' })
  @ApiResponse({
    status: 200,
    description: 'üìä Advanced user listing with metadata',
    type: AdminUserListDto
  })
  async getUsersAdvanced(
    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,
    @Query('limit', new DefaultValuePipe(20), ParseIntPipe) limit: number,
    @Query('search') searchTerm?: string,
    @Query('status') statusFilter?: string,
    @Query('sortBy', new DefaultValuePipe('createdAt')) sortBy?: string,
    @Query('sortOrder', new DefaultValuePipe('desc')) sortOrder?: 'asc' | 'desc',
  ): Promise<AdminUserListDto> {
    const safeLimit = Math.min(limit, 100);
    return this.adminService.getAllUsers(page, safeLimit, searchTerm, statusFilter, sortBy, sortOrder);
  }

  @Patch('users/:id/profile')
  @ApiOperation({
    summary: 'Update user profile and settings',
    description: `
**‚úèÔ∏è User Profile Management**

Update user account details, security settings, and administrative privileges.
Supports partial updates and account unlock operations.

**‚ú® Update Options:**
‚Ä¢ Username and email
‚Ä¢ Password reset
‚Ä¢ Admin status toggle
‚Ä¢ Account unlock
‚Ä¢ Bulk field updates
    `
  })
  @ApiParam({ name: 'id', description: 'User ID', example: 'clp1234567890' })
  @ApiResponse({
    status: 200,
    description: '‚úÖ User updated successfully',
    type: AdminUserDto
  })
  async updateUserProfile(
    @Param('id') userId: string,
    @Body() updateData: AdminUserUpdateDto
  ): Promise<AdminUserDto> {
    return this.adminService.updateUserProfile(userId, updateData);
  }

  @Post('users/bulk-action')
  @ApiOperation({
    summary: 'Perform bulk operations on multiple users',
    description: `
**‚ö° Bulk User Operations**

Efficiently manage multiple user accounts with batch operations.
Perfect for administrative tasks and user management workflows.

**üîß Supported Actions:**
‚Ä¢ Bulk unlock accounts
‚Ä¢ Bulk lock accounts  
‚Ä¢ Promote to admin
‚Ä¢ Demote from admin
‚Ä¢ Bulk delete (use carefully!)

**üí° NextJS Frontend Benefits:**
‚Ä¢ Progress tracking support
‚Ä¢ Batch operation results
‚Ä¢ Error handling per user
‚Ä¢ Rollback capabilities
    `
  })
  @ApiResponse({
    status: 200,
    description: '‚úÖ Bulk operation completed',
    schema: {
      example: {
        success: true,
        affected: 15,
        message: 'Successfully performed unlock action on 15 users'
      }
    }
  })
  async performBulkAction(
    @Body() bulkActionDto: AdminBulkActionDto
  ) {
    return this.adminService.performBulkAction(bulkActionDto);
  }

  @Post('users/export')
  @ApiOperation({
    summary: 'Export user data in various formats',
    description: `
**üìä User Data Export**

Export user data for reporting, analysis, or backup purposes.
Supports multiple formats and flexible field selection.

**üìÅ Export Formats:**
‚Ä¢ CSV (Spreadsheet compatible)
‚Ä¢ JSON (API/Development use)

**üéØ Customizable Fields:**
‚Ä¢ Basic info (id, email, username)
‚Ä¢ Security details (failed attempts, locks)
‚Ä¢ Activity data (last login, creation date)
‚Ä¢ Admin status and privileges

**üîÑ Perfect for:**
‚Ä¢ Regular data backups
‚Ä¢ Compliance reporting
‚Ä¢ User analytics
‚Ä¢ Migration planning
    `
  })
  @ApiResponse({
    status: 200,
    description: 'üì• Export data generated',
    schema: {
      example: {
        data: [
          {
            id: 'clp1234567890',
            email: 'user@example.com',
            username: 'username123',
            isAdmin: false,
            createdAt: '2024-01-15T10:30:00.000Z'
          }
        ],
        filename: 'users_export_2024-01-15.csv'
      }
    }
  })
  async exportUsers(
    @Body() exportDto: AdminUserExportDto
  ) {
    return this.adminService.exportUsers(exportDto);
  }
}