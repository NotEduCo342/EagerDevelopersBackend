// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // This loads from the .env file
}

// USER MODEL
// Handles user data for authentication and blog post authorship.
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String
  password  String // Will be stored as a hash
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Account lockout fields for brute force protection
  failedLoginAttempts Int      @default(0)
  lockedUntil        DateTime?
  
  // Admin role for administrative privileges
  isAdmin   Boolean  @default(false)
  
  // Session management fields
  lastLoginAt  DateTime?
  lastActiveAt DateTime?
  
  posts         Post[]
  comments      Comment[]
  refreshTokens RefreshToken[]
}

// POST MODEL
// For your blog functionality.
model Post {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  excerpt       String?
  content       String    @db.Text
  featuredImage String?
  category      String
  tags          String[]
  publishedAt   DateTime  @default(now())
  readingTime   Int
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  comments      Comment[]
}

// COMMENT MODEL
// For user comments on blog posts.
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

// PROJECT MODEL
// For your portfolio mini-projects.
model Project {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  imageUrl    String
  addres      String // URL to the project
  tags        String[]
}

// REFRESH TOKEN MODEL
// For secure JWT refresh token management and session tracking.
model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique @db.VarChar(500)
  userId      String
  deviceInfo  String?  // Browser/Device identification
  ipAddress   String?  // For security monitoring
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime @default(now())
  isRevoked   Boolean  @default(false)
  revokedAt   DateTime?
  revokedReason String? // "logout", "security", "expired", etc.
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}